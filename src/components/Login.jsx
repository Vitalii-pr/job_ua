import React, { useState } from 'react';
import { auth, db } from '../firebase';
import { GoogleAuthProvider, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import './Login.css';

const Login = ({ onLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isSignUp, setIsSignUp] = useState(false);
  const [name, setName] = useState('');
  const [surname, setSurname] = useState('');
  const [error, setError] = useState('');

  const handleGoogleLogin = async () => {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(auth, provider);
      const user = result.user;

      const userRef = doc(db, 'user_table', user.uid);
      const docSnap = await getDoc(userRef);

      if (!docSnap.exists()) {
        await setDoc(userRef, {
          uid: user.uid,
          name: user.displayName?.split(' ')[0] || '',
          surname: user.displayName?.split(' ')[1] || '',
          email: user.email,
          photo: user.photoURL,
          role: 'employee',
          created_at: new Date(),
          updated_at: new Date(),
        });
      }

      console.log('User signed in and added to Firestore');
      onLogin(user);
    } catch (error) {
      console.error('Error signing in with Google:', error);
      setError('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  };

  const handleEmailLogin = async (e) => {
    e.preventDefault();
    setError('');
    
    try {
      if (isSignUp) {
        // Sign up with email and password
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;
        
        // Add user to Firestore
        const userRef = doc(db, 'user_table', user.uid);
        await setDoc(userRef, {
          uid: user.uid,
          name: name,
          surname: surname,
          email: user.email,
          role: 'employee',
          created_at: new Date(),
          updated_at: new Date(),
        });
        
        console.log('User signed up and added to Firestore');
        onLogin(user);
      } else {
        // Sign in with email and password
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        console.log('User signed in with email');
        onLogin(userCredential.user);
      }
    } catch (error) {
      console.error('Error with email auth:', error);
      
      if (error.code === 'auth/invalid-credential') {
        setError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.');
      } else if (error.code === 'auth/email-already-in-use') {
        setError('–¶–µ–π email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —É–≤—ñ–π—Ç–∏.');
      } else if (error.code === 'auth/weak-password') {
        setError('–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤.');
      } else {
        setError('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
    }
  };

  return (
    <div className="login-page">
      <div className="login-sidebar">
        <div className="logo-container">
          <img src="/logo.svg" alt="Job UA Logo" className="logo" />
        </div>
        <div className="sidebar-content">
          <h1>Job UA</h1>
          <h2>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤</h2>
          <p>–ó–Ω–∞–π–¥—ñ—Ç—å —Ä–æ–±–æ—Ç—É —Å–≤–æ—î—ó –º—Ä—ñ—ó –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞ –¥–ª—è –≤–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó</p>
          <div className="features">
            <div className="feature-item">
              <div className="feature-icon">üìä</div>
              <div className="feature-text">
                <h3>–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫</h3>
                <p>–ó–Ω–∞–π–¥—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∞–±–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω</p>
              </div>
            </div>
            <div className="feature-item">
              <div className="feature-icon">üìù</div>
              <div className="feature-text">
                <h3>–ó—Ä—É—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å</h3>
                <p>–î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑ —É—Å—ñ—î—é –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é</p>
              </div>
            </div>
            <div className="feature-item">
              <div className="feature-icon">üíº</div>
              <div className="feature-text">
                <h3>–ü—Ä—è–º–∏–π –∫–æ–Ω—Ç–∞–∫—Ç</h3>
                <p>–ó–≤'—è–∂—ñ—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –∑ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü–µ–º –∞–±–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div className="login-content">
        <div className="login-form-container">
          <h2>{isSignUp ? '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' : '–í—Ö—ñ–¥'}</h2>
          
          {error && <div className="error-message">{error}</div>}
          
          <form onSubmit={handleEmailLogin} className="login-form">
            {isSignUp && (
              <>
                <div className="form-group">
                  <label htmlFor="name">–Ü–º'—è</label>
                  <input
                    type="text"
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required={isSignUp}
                    className="form-control"
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="surname">–ü—Ä—ñ–∑–≤–∏—â–µ</label>
                  <input
                    type="text"
                    id="surname"
                    value={surname}
                    onChange={(e) => setSurname(e.target.value)}
                    required={isSignUp}
                    className="form-control"
                  />
                </div>
              </>
            )}
            
            <div className="form-group">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="form-control"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="form-control"
                minLength={6}
              />
            </div>
            
            {!isSignUp && (
              <div className="forgot-password">
                <a href="#reset-password">–ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
              </div>
            )}
            
            <button type="submit" className="login-button">
              {isSignUp ? '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è' : '–£–≤—ñ–π—Ç–∏'}
            </button>
          </form>
          
          <div className="divider">
            <span>–∞–±–æ</span>
          </div>
          
          <button onClick={handleGoogleLogin} className="google-login-btn">
            <img src="/google-icon.svg" alt="Google" className="google-icon" />
            {isSignUp ? '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ Google' : '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google'}
          </button>
          
          <div className="toggle-form">
            {isSignUp ? (
              <p>–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? <button onClick={() => setIsSignUp(false)}>–£–≤—ñ–π—Ç–∏</button></p>
            ) : (
              <p>–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É? <button onClick={() => setIsSignUp(true)}>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</button></p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
